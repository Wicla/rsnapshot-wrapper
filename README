--- Introduction ---

This is a wrapper for rsnapshot (http://rsnapshot.org/).
It adds the possibility of using public key authentication keys which is password protected by calling keychain (http://www.funtoo.org/en/security/keychain/intro/) and using the cached key information.
Another feature is gives is the ability to try to backup hosts even if they're unavailable upon script execution. It retries several times (depending on configuration) to try if the host is up.
Also it adds the ability to backup hosts through reverse SSH-tunnels (like connected laptops). This feature requires that the laptop has a reverse port forwarded and the configuration file is properly set up.

Usage: /path/to/rsnapshot-wrapper.sh [config] [backup type]
Example: /usr/local/bin/rsnapshot-wrapper.sh /etc/rsnapshot/rsnapshot-laptop.conf daily

Example of cron entries:
0   11  *  *  *   /usr/local/bin/rsnapshot-wrapper.sh laptop daily
20  15  *  *  2   /usr/local/bin/rsnapshot-wrapper.sh laptop weekly
0   0   03 *  *   /usr/local/bin/rsnapshot-wrapper.sh laptop monthly


--- Example ---

Concepts:
[client] = the host which is a client to the backup server.
[server] = the backup server (running rsnapshot)
[hostname] = hostname of client
[user] = user which will be used on client side


-- Server side --

To be able to backup files which aren't readable for [user] you need to use rsync_wrapper.sh (see more in "Client side" later on).
If this is required modify rsnapshot configuration file. Find rsync_short_args and rsync_long_args and uncomment them. Add `--rsync-path=rsync_wrapper.sh` to rsync_long_args.
  rsync_long_args   --delete --numeric-ids --relative --delete-excluded --rsync-path=rsync_wrapper.sh

Generate a new public key pair on the [server], preferly with passphrase, with [hostname] as hostname of host.
  # ssh-keygen -f /root/.ssh/[hostname]

Install rsnapshot-wrapper.sh to a suitable location (/usr/local/bin/ perhaps?)
This is a set of crontab entries. Modify to suite your needs.

  0   11  *  *  *   /usr/local/bin/rsnapshot-wrapper.sh [hostname] daily
  20  15  *  *  2   /usr/local/bin/rsnapshot-wrapper.sh [hostname] weekly
  0   0   03 *  *   /usr/local/bin/rsnapshot-wrapper.sh [hostname] monthly

-- Client side --

Connecting with root as remote user to [client] is not recommended. It is recommended to create a new [user]. For example backup.
Once that is done transfer the public part (.pub) to the [client] to be backed up and add it to /home/[user]/.ssh/authorized_keys on the used user.
  # cat [hostname] >> /home/[user]/.ssh/authorized_keys

It might be needed to add entries in sudo which allows [user] to backup non-readable files (in /etc for example).
First setup [user] and then add entries in sudo.
Add scripts/rsync_wrapper.sh to the same directory as rsync resides in (you may find it running `whereis rsync`) on [client].

In visudo (/etc/sudoers)
  Cmnd_Alias    BACKUPCOMMANDS = /usr/bin/rsync
  [user]        ALL=NOPASSWD: BACKUPCOMMANDS


-- Adding extra security --

This is also done on [client].

Copy scripts/validate-rsync.sh to proper folders (/usr/local/bin might be a choice).
For example if validate-rsync.sh resides in /usr/local/bin and only 10.0.0.9 should be allowed to connect with public key pair add the following string to /home/[user]/.ssh/authorized_keys before private key part.
from="10.0.0.9",command="/usr/local/bin/validate-rsync.sh" ssh-rsa ... <private key>
